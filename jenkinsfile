pipeline {
    agent any
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-sa')
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/satya-git07/loadbalancer.git'
            }
        }
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'gcp-sa', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Wait for VM to be ready') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        waitUntil {
                            def vmIpJson = sh(script: "terraform output -json vm_ips", returnStdout: true).trim()
                            def vmIps = readJSON text: vmIpJson
                            return vmIps.every { ip -> sh(script: "nc -z -w 5 ${ip} 22", returnStatus: true) == 0 }
                        }
                    }
                }
            }
        }
        stage('Fix Directory Permissions') {
            steps {
                sh 'chmod 755 ${WORKSPACE}'
            }
        }

        stage('Generate and Update Ansible Inventory') {
            steps {
                script {
                    def vmIpJson = sh(script: "terraform output -json vm_ips", returnStdout: true).trim()
                    def vmIps = readJSON text: vmIpJson

                    def inventoryContent = "all:\n  children:\n    web:\n      hosts:\n"
                    for (int i = 0; i < vmIps.size(); i++) {
                        inventoryContent += "        web_ansible-${i + 1}:\n          ansible_host: ${vmIps[i]}\n          ansible_user: centos\n          ansible_ssh_private_key_file: /root/.ssh/id_rsa\n"
                    }

                    writeFile file: "${WORKSPACE}/inventory.gcp.yml", text: inventoryContent
                }
            }
        }

        stage('Add Host Key') {
            steps {
                script {
                    def vmIpJson = sh(script: "terraform output -json vm_ips", returnStdout: true).trim()
                    def vmIps = readJSON text: vmIpJson

                    for (String ip : vmIps) {
                        sh "ssh-keyscan -H ${ip} >> /root/.ssh/known_hosts || true"
                    }
                }
            }
        }
        stage('Test SSH Access') {
            steps {
                script {
                    def vmIpJson = sh(script: "terraform output -json vm_ips", returnStdout: true).trim()
                    def vmIps = readJSON text: vmIpJson
        
                    for (String ip : vmIps) {
                        sh "ssh -i /root/.ssh/id_rsa centos@${ip} 'echo SSH is working!' || { echo 'SSH access failed for ${ip}'; exit 1; }"
                    }
                }
            }
        }

        stage('Install Apache using Ansible') {
            steps {
                withEnv(["ANSIBLE_HOST_KEY_CHECKING=False"]) {
                    sh "ansible-playbook -i ${WORKSPACE}/inventory.gcp.yml ${WORKSPACE}/apache_install.yml"
                }
            }
        }
    }
}
